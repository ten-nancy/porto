Language: Cpp
BasedOnStyle: Google

IndentWidth: 4
ColumnLimit: 120
Standard: c++17

# These settings are different from default values

# If ``false``, spaces will be removed before constructor initializer colon.
SpaceBeforeCtorInitializerColon: false

# If ``false``, spaces will be removed before inheritance colon.
# ```
# true:                                  false:
# class Foo : Bar {}             vs.     class Foo: Bar {}
# ```
SpaceBeforeInheritanceColon: false

# If ``false``, spaces will be removed before range-based for loop
# colon.
# ```
# true:                                  false:
# for (auto v : values) {}       vs.     for(auto v: values) {}
# ```
SpaceBeforeRangeBasedForLoopColon: false

# Dependent on the value, ``if (a) return;`` can be put on a single line.
# Never put short ifs on the same line.
# ```
# if (a)
#   return;
# if (b)
#   return;
# else
#   return;
# if (c)
#   return;
# else {
#   return;
# }
# ```
AllowShortIfStatementsOnASingleLine: Never

# Dependent on the value, ``int f() { return 0; }`` can be put on a
# single line.
# Only merge empty functions.
# ```
# void f() {}
# void f2() {
#   bar2();
# }
# ```
AllowShortFunctionsOnASingleLine: Empty

# If ``true``, ``while (true) continue;`` can be put on a single
# line.
AllowShortLoopsOnASingleLine: false

# Style of aligning consecutive macro definitions.
# ```
# true:
# int d    = 3;
# /* A comment. */
# double e = 4;

# false:
# int d = 3;
# /* A comment. */
# double e = 4;
# ```
AlignConsecutiveMacros: AcrossComments

# The extra indent or outdent of access modifiers, e.g. ``public:``.
AccessModifierOffset: -4

# The pack constructor initializers style to use.
# Put all constructor initializers on the current line if they fit.
# Otherwise, put each one on its own line.
# ```
# Constructor() : a(), b()

# Constructor()
#    : aaaaaaaaaaaaaaaaaaaa(),
#      bbbbbbbbbbbbbbbbbbbb(),
#      ddddddddddddd()
# ```
PackConstructorInitializers: CurrentLine

# Indent case labels one level from the switch statement.
# When ``false``, use the same indentation level as for the switch
# statement. Switch statement body is always indented one level more than
# case labels (except the first block following the case label, which
# itself indents the code - unless IndentCaseBlocks is enabled).
# ```
# false:                                 true:
# switch (fool) {                vs.     switch (fool) {
# case 1:                                  case 1:
#  bar();                                   bar();
#  break;                                   break;
# default:                                 default:
#  plop();                                  plop();
# }                                      }
# ```
IndentCaseLabels: false

# If ``true``, analyze the formatted file for the most common
# alignment of ``&`` and ``*``.
# Pointer and reference alignment styles are going to be updated according
# to the preferences found in the file.
# ``PointerAlignment`` is then used only as fallback.
DerivePointerAlignment: false

# Pointer and reference alignment style.
# Align pointer to the right.
# ```
# int *a;
# ```
PointerAlignment: Right
